export class InterfaceModule {
    private static instanceRef: InterfaceModule;
    private driver: ChatruletkaDriver;

    private constructor(driver: ChatruletkaDriver) {
        this.driver = driver
    }

    static initInstance(driver: ChatruletkaDriver): InterfaceModule {
        if (InterfaceModule.instanceRef === undefined) {
            InterfaceModule.instanceRef = new InterfaceModule(driver);
        }

        return InterfaceModule.instanceRef;
    }
}

export class ControlsTabApi {
    private static instanceRef: ControlsTabApi;
    private controls: ControlsModule;

    private constructor(controls: ControlsModule) {
        this.controls = controls
    }

    static initInstance(controls: ControlsModule): ControlsTabApi {
        if (ControlsTabApi.instanceRef === undefined) {
            ControlsTabApi.instanceRef = new ControlsTabApi(controls);
        }

        return ControlsTabApi.instanceRef;
    }
}

let settings = [
    {
        type: "header",
        text: chrome.i18n.getMessage("settingsInterface")
    },
    {
        type: "br"
    },
    {
        type: "HTMLElement",
        element: utils.createElement('br')
    },

    {
        type: "button",
        text: "text",
        onclick: (e: MouseEvent) => {
            console.dir(e)
        }
    },
    {
        type: "range",
        important: false,
        text: "range",
        tooltip: "TOOLTIP",
        key: "blurPreviewFilter",
        min: 0,
        max: 200,
        onchange?: ()=>{}
    },
    {
        type: "checkbox",
        important: false,
        key: "darkMode",
        text: chrome.i18n.getMessage("darkMode"),
        tooltip: chrome.i18n.getMessage("tooltipDarkMode"),
        controlsSection?: "targetCityDiv",
        enable: () => {
            this.tweaks.darkMode.enable()
        },
        disable: () => {
            this.tweaks.darkMode.disable()
        }
    },
    {
        type: "section",
        hide: globalThis.settings.enableTargetCity,
        sectionId: "targetCityDiv",
        children: [
            {
                type: "button",
                text: "text",
                onclick: (e: MouseEvent) => {
                    console.dir(e)
                }
            }
        ]
    }
]
